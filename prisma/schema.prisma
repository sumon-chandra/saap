generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userName       String
  name           String
  email          String    @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  coverImage     String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime?
  comments       Comment[]
  posts          Post[]
  accounts       Account[]
  likePosts      Like[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  image     String?
  body      String
  likes     Like[]
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime?
  comments  Comment[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
}

model Comment {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  body     String
  like     Int    @db.Int
  dislikes Int    @db.Int
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId   String @db.ObjectId
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
