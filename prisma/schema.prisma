// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  profileId      String?   @unique
  name           String
  email          String    @unique
  hashedPassword String
  image          String?
  coverImage     String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime?

  comments Comment[]
  posts    Post[]
  accounts Account[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String?
  body      String
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  tagIds   String[]  @db.ObjectId
  tags     Tag[]     @relation(fields: [tagIds], references: [id])
  comments Comment[]
}

model Comment {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  body     String
  like     Int    @db.Int
  dislikes Int    @db.Int
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId   String @db.ObjectId
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Tag {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  postIds String[] @db.ObjectId
  posts   Post[]   @relation(fields: [postIds], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
